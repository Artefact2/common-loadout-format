#!/usr/bin/env php
<?php
/* Author : Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

/* Create a SQLite database from Phobos-generated JSON tables. */

if($argc != 2 || !is_dir($argv[1])) {
	echo "Usage: ".$argv[0]." <json_files>\n";
	die(1);
}

ini_set('memory_limit', -1);

$dbfile = 'eve-sqlite3-phobos.db';
if(file_exists($dbfile)) unlink($dbfile);
$db = new SQLite3($dbfile, SQLITE3_OPEN_CREATE | SQLITE3_OPEN_READWRITE);

/* XXX: other json files are unpredictable. Phobos output changes all
 * the time and I am tired of paching thing up. */
foreach(glob($argv[1].'/{dgm,inv}*.json', GLOB_BRACE) as $jsonfile) {
	$table = preg_replace(
		'%[^a-z0-9_-]%', '',
		strtolower(pathinfo($jsonfile, PATHINFO_FILENAME))
	);
	echo $table." ";

	if(strpos($table, 'localization') !== false) {
		echo "s\n";
		continue;
	}

	$q = 'CREATE TABLE IF NOT EXISTS "'.$table.'"';

	$rows = [];
	$jsondata = json_decode(file_get_contents($jsonfile), true);

	if(!is_array($jsondata)) {
		var_dump($jsondata);
		continue;
	}

	$rows = $jsondata;
	
	if($rows === []) {
		echo "e\n";
		continue;
	}

	$types = [];

	/* Try to fetch as many non-NULL values in columns as possible */
	foreach($rows as $row) {
		foreach($row as $k => $v) {
			if(!isset($types[$k])) $types[$k] = null;

			if($v !== null) {
				$types[$k] = $v;
			}
		}
	}

	$columns = array();
	foreach($types as $k => $v) {
		if(is_string($v)) {
			$type = 'TEXT';
		} else if(is_int($v) || is_bool($v)) {
			$type = 'INTEGER';
		} else if(is_float($v)) {
			$type = 'REAL';
		} else if(is_null($v)) {
			$type = 'INTEGER';
		} else if(is_array($v)) {
			/* Serialize arrays using JSON */
			$type = 'TEXT';
		} else {
			echo "Unknown type: ";
			var_dump($v);
			continue 2;
		}

		if(preg_match('%[^a-zA-Z]%', $k)) $k = 'c'.$k;

		$columns[] = preg_replace('%[^a-z0-9_]%', '_', strtolower($k)).' '.$type.' NULL';
	}

	$q .= " (".implode(', ', $columns).")";
	if($db->query($q) === false) {
		echo $q;
		die(2);
	}
	$db->query('DELETE FROM '.$table);

	$fullvalues = array();
	$batchsize = 500;
	$i = 0;
	foreach($rows as $row) {
		$values = array();
		foreach($types as $k => $v) {
			$v = isset($row[$k]) ? $row[$k] : null;
			
			/* XXX: Dirty dirty hack: ignore DUST stuff since it has
			 * duplicate typenames with some EVE modules */
			if($k === 'typeID' && $v >= 350000) continue 2;

			if($v === null) $v = 'NULL';
			else if(is_string($v)) $v = "'".$db->escapeString($v)."'";
			else if(is_bool($v)) $v = $v ? 1 : 0;
			else if(is_array($v)) $v = "'".$db->escapeString(json_encode($v))."'";
			else {
				/* Floats and integers */
				$v = (string)$v;
			}

			$values[] = $v;
		}

		$fullvalues[] = '('.implode(', ', $values).')';

		if((++$i % $batchsize) == 0) {
			if($db->query($q = 'INSERT INTO "'.$table.'" VALUES '.implode(', ', $fullvalues)) === false) {
				echo $q;
				die(1);
			}
			$fullvalues = array();
			echo ".";
		}
	}

	if(count($fullvalues) > 0) {
		if($db->query($q = 'INSERT INTO "'.$table.'" VALUES '.implode(', ', $fullvalues)) === false) {
			echo $q;
			die(1);
		}
		$fullvalues = array();
		echo ",";
	}

	echo "\n";
}
